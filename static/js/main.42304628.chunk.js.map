{"version":3,"sources":["components/Form.js","redux/actions.js","components/Note.js","components/NotesList.js","components/Main.js","redux/reducer.js","redux/store.js","App.js","index.js"],"names":["Form","saveHandler","useState","noteTitle","noteBody","note","setNote","clear","className","htmlFor","value","onChange","e","target","type","id","placeholder","rows","onClick","url","SET_NOTES","DELL_NOTE","deleteNote","dispatch","fetch","method","then","response","ok","Error","status","toString","payload","dellNote","console","log","getNotes","json","notes","setNotes","catch","error","message","Note","removeNotes","isEdit","setIsEdit","editedNote","setEditedNote","useDispatch","updatedNote","headers","body","JSON","stringify","err","updateNote","NotesList","map","_id","Main","useEffect","useSelector","state","newNote","addNote","initialState","store","createStore","action","filter","composeWithDevTools","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.42304628.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nconst Form = ({saveHandler}) => {\n\n    const [note,setNote] = useState({noteTitle:\"\",noteBody:\"\"});\n\n    const clear = () => {\n        setNote({noteTitle:\"\",noteBody:\"\"});\n    }\n\n    const saveNewNoteHandler = () => {\n        if(note.noteTitle && note.noteBody){\n            saveHandler(note);\n            clear();\n        }\n    }\n\n    return (\n        <div className=\"text-center bg-warning rounded p-2\">\n            <div className=\"mb-3\">\n                <label htmlFor=\"exampleFormControlInput1\" className=\"form-label text-danger\"><strong>Введите заголовок:</strong></label>\n                <input value={note.noteTitle}\n                       onChange={(e)=>setNote({...note,noteTitle:e.target.value})}\n                       type=\"text\"\n                       className=\"form-control\"\n                       id=\"exampleFormControlInput1\"\n                       placeholder=\"Заголовок\"/>\n            </div>\n            <div className=\"mb-3\">\n                <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label text-danger m-1\"><strong>Текст заметки:</strong></label>\n                <textarea\n                    value={note.noteBody}\n                    onChange={(e)=>setNote({...note,noteBody:e.target.value})}\n                    className=\"form-control\"\n                    id=\"exampleFormControlTextarea1\"\n                    rows=\"3\"\n                    placeholder=\"Текст заметки\"/>\n            </div>\n            <div>\n                <button className=\"btn btn-outline-danger m-1\" onClick={saveNewNoteHandler}>Сохранить</button>\n                <button className=\"btn btn-outline-danger m-1\" onClick={clear}>Очистить</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Form;","export const url = \"https://server-for-notes.herokuapp.com/notes/\";\nexport const localUrl =  \"http://localhost:5000/notes/\";\nexport const SET_NOTES = \"SET_NOTES\";\nexport const DELL_NOTE = \"DELL_NOTE\";\n\n\nexport const setNotes = (notes) => ({\n    type: SET_NOTES,\n    payload: notes\n})\n\nexport const dellNote = (id) => ({\n    type: DELL_NOTE,\n    payload: id\n})\n\nexport const addNote = (newNote) => {\n    return (dispatch) => {\n        fetch(url + \"add\", {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(newNote)\n        })\n            .then(response => {\n                if (response.ok) {\n                    console.log(\"Note Added\");\n                } else {\n                    throw new Error(response.status.toString());\n                }\n            })\n            .then(() => dispatch(getNotes()))\n            .catch(err => console.log(err));\n    }\n}\n\nexport const updateNote = (id, updatedNote) => {\n    return (dispatch) => {\n        fetch(url + \"update/\" + id, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(updatedNote)\n        })\n            .then(response => {\n                if (response.ok) {\n                    console.log(`Note id ${id} updated!`);\n                } else {\n                    throw new Error(response.status.toString());\n                }\n            })\n            .then(() => dispatch(getNotes()))\n            .catch(err => console.log(err));\n    }\n}\n\nexport const deleteNote = (id) => {\n    return (dispatch) => {\n        fetch(url + id, {method: \"DELETE\"})\n            .then(response => {\n                if (response.ok) {\n                    dispatch(dellNote(id));\n                    console.log(`Note with id ${id} deleted!`);\n                } else {\n                    throw new Error(response.status.toString());\n                }\n            })\n    }\n}\n\nexport const getNotes = () => {\n    return (dispatch) => {\n        fetch(url, {method: \"GET\"})\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                } else {\n                    throw new Error(response.status.toString());\n                }\n            })\n            .then(notes => dispatch(setNotes(notes)))\n            .catch(error => console.log(error.message));\n    }\n}","import React, {useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport {updateNote} from \"../redux/actions\";\n\nconst Note = ({removeNotes, note, id}) => {\n\n    const [isEdit, setIsEdit] = useState(false);\n\n    const [editedNote, setEditedNote] = useState({noteTitle: note.noteTitle, noteBody: note.noteBody});\n\n    const dispatch = useDispatch();\n\n    const saveEditedNoteHandler = () => {\n        if (editedNote.noteTitle && editedNote.noteTitle) {\n            dispatch(updateNote(id, editedNote));\n            setIsEdit(false);\n        }\n\n    }\n\n    switch (isEdit) {\n        case true:\n            return (\n                <li className=\"bg-warning rounded m-2 p-2 text-center list-group\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <input value={editedNote.noteTitle}\n                                   onChange={(e) => setEditedNote({...editedNote, noteTitle: e.target.value})}\n                                   type=\"text\"\n                                   className=\"form-control\"\n                                   placeholder=\"Заголовок\"/>\n                            <textarea\n                                value={editedNote.noteBody}\n                                onChange={(e) => setEditedNote({...editedNote, noteBody: e.target.value})}\n                                className=\"form-control\"\n                                rows=\"3\"\n                                placeholder=\"Текст заметки\"/>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <button className=\"btn btn-danger m-1\" onClick={saveEditedNoteHandler}>\n                                <i className=\"bi bi-save text-warning\"></i>\n                            </button>\n                        </div>\n                        <div className=\"col\">\n                            <button className=\"btn btn-danger m-1\" onClick={() => setIsEdit(false)}>\n                                <i className=\"bi bi-x-square text-warning\"></i>\n                            </button>\n                        </div>\n                    </div>\n                </li>\n            )\n        case false:\n            return (\n                <li className=\"bg-warning rounded m-2 p-2 text-center list-group\">\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <p className=\"bg-danger rounded text-light\"><strong>{note.noteTitle}</strong></p>\n                            <p>{note.noteBody}</p>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <button\n                                className=\"btn btn-danger m-1\"\n                                onClick={() => removeNotes(id)}>\n                                <i className=\"bi bi-trash text-warning\"></i>\n                            </button>\n\n                        </div>\n                        <div className=\"col\">\n                            <button\n                                className=\"btn btn-danger m-1\" onClick={() => setIsEdit(true)}>\n                                <i className=\"bi bi-pencil-square text-warning\"></i>\n                            </button>\n                        </div>\n                    </div>\n\n\n                </li>\n            );\n    }\n};\n\nexport default Note;","import React from 'react';\nimport Note from \"./Note\";\n\nconst NotesList = ({notes, removeNotes}) => {\n\n    return (\n        <div>\n            <ul>\n                {notes.map((note) =>\n                    <Note note={note} key={note._id} id={note._id} removeNotes={removeNotes}/>\n                )}\n            </ul>\n        </div>\n    );\n}\n\nexport default NotesList;","import React, {useEffect} from 'react';\nimport Form from \"./Form\";\nimport NotesList from \"./NotesList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addNote, deleteNote, getNotes} from \"../redux/actions\";\n\nconst Main = () => {\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        dispatch(getNotes());\n    },[]);\n\n    const notes = useSelector(state => state.notes);\n\n    const removeNotes = (id) => {\n        dispatch(deleteNote(id));\n        dispatch(getNotes());\n    }\n\n    const saveHandler = (newNote) =>{\n        dispatch(addNote(newNote));\n    }\n\n    return (\n        <>\n            <div className=\"container bg-danger my-2 p-2 align-content-center rounded\">\n                <div className=\"row\">\n                    <div className=\"col text-center\">\n                        <h2 className=\"text-light\"><i className=\"bi bi-journal-bookmark-fill\"></i> Заметки</h2>\n                    </div>\n                </div>\n            </div>\n            <div className=\"container bg-danger my-2 p-2 align-content-center rounded\">\n                <div className=\"row\">\n                    <div className=\"col text-center\">\n                        <h2 className=\"text-light\">Заполни форму и нажми сохранить!</h2>\n                        <p className=\"text-light\">Все заметки сохраняются в базу данных Mondo DB Atlas</p>\n                    </div>\n                    <div className=\"row m-0\">\n                        <div className=\"col-4\">\n                            <Form saveHandler={saveHandler} notes={notes}/>\n                        </div>\n                        <div className=\"col-8\">\n                            <NotesList removeNotes={removeNotes} notes={notes}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </>\n    );\n};\n\nexport default Main;","import {DELL_NOTE, SET_NOTES} from \"./actions\";\n\nconst initialState = {\n    notes: []\n};\n\nexport const reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_NOTES:\n            return {...state, notes: action.payload};\n        case DELL_NOTE:\n            return {...state, notes: state.notes.filter(note => note._id !== action.payload)};\n        default:\n            return state;\n    }\n}\n","import {applyMiddleware, createStore} from \"redux\";\nimport {reducer} from \"./reducer\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nexport const store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));","import 'bootstrap/dist/css/bootstrap.min.css';\nimport Main from \"./components/Main\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nfunction App() {\n  return (<Provider store={store}><Main/></Provider>);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}